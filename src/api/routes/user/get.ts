import fetch from 'node-fetch';
import ApiClient from '../../client';

export default function (id: number) {
    return fetch(new URL(`/player/${id}`, ApiClient.API_URL).toString()).then(res => res.json()) as Promise<ApiGetUserResponse>;
}

// Typings are incomplete, generated by JSON to TS extension

export interface ApiGetUserResponse {
    mapperId: number;
    banned: boolean;
    inactive: boolean;
    banDescription?: any;
    externalProfileUrl: string;
    history?: any;
    badges: any[];
    pinnedScores?: any;
    changes: ApiGetUserChange[];
    accPp: number;
    passPp: number;
    techPp: number;
    scoreStats: ApiGetUserScoreStats;
    lastWeekPp: number;
    lastWeekRank: number;
    lastWeekCountryRank: number;
    eventsParticipating: any[];
    id: string;
    name: string;
    platform: string;
    avatar: string;
    country: string;
    bot: boolean;
    pp: number;
    rank: number;
    countryRank: number;
    role: string;
    socials: ApiGetUserSocial[];
    patreonFeatures: ApiGetUserPatreonFeatures;
    profileSettings: ApiGetUserProfileSettings;
    clans: any[];
  }
  
  interface ApiGetUserProfileSettings {
    id: number;
    bio?: any;
    message?: any;
    effectName: string;
    profileAppearance: string;
    hue: number;
    saturation: number;
    leftSaberColor?: any;
    rightSaberColor?: any;
    profileCover?: any;
    starredFriends: string;
    showBots: boolean;
    showAllRatings: boolean;
  }
  
  interface ApiGetUserPatreonFeatures {
    id: number;
    bio: string;
    message: string;
    leftSaberColor: string;
    rightSaberColor: string;
  }
  
  interface ApiGetUserSocial {
    id: number;
    service: string;
    link: string;
    user: string;
    userId: string;
    playerId: string;
  }
  
  interface ApiGetUserScoreStats {
    id: number;
    totalScore: number;
    totalUnrankedScore: number;
    totalRankedScore: number;
    lastScoreTime: number;
    lastUnrankedScoreTime: number;
    lastRankedScoreTime: number;
    averageRankedAccuracy: number;
    averageWeightedRankedAccuracy: number;
    averageUnrankedAccuracy: number;
    averageAccuracy: number;
    medianRankedAccuracy: number;
    medianAccuracy: number;
    topRankedAccuracy: number;
    topUnrankedAccuracy: number;
    topAccuracy: number;
    topPp: number;
    topBonusPP: number;
    topPassPP: number;
    topAccPP: number;
    topTechPP: number;
    peakRank: number;
    rankedMaxStreak: number;
    unrankedMaxStreak: number;
    maxStreak: number;
    averageLeftTiming: number;
    averageRightTiming: number;
    rankedPlayCount: number;
    unrankedPlayCount: number;
    totalPlayCount: number;
    averageRankedRank: number;
    averageWeightedRankedRank: number;
    averageUnrankedRank: number;
    averageRank: number;
    sspPlays: number;
    ssPlays: number;
    spPlays: number;
    sPlays: number;
    aPlays: number;
    topPlatform: string;
    topHMD: number;
    dailyImprovements: number;
    authorizedReplayWatched: number;
    anonimusReplayWatched: number;
    watchedReplays: number;
  }
  
  interface ApiGetUserChange {
    id: number;
    timestamp: number;
    playerId: string;
    oldName: string;
    newName: string;
    oldCountry: string;
    newCountry?: any;
    changer?: any;
  }